--------------------------------------------------------------------------------
--
-- Copyright (C) 2005 The Chameleon Team
--
-- This program is free software; you can redistribute it and/or modify it
-- under the terms of the GNU General Public License as published by the Free 
-- Software Foundation; either version 2 of the License, or (at your option) 
-- any later version. This program is distributed in the hope that it will be 
-- useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-- See the GNU General Public License for more details. 
-- You should have received a copy of the GNU General Public License along
-- with this program; if not, write to the Free Software Foundation, Inc., 
-- 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
--
--------------------------------------------------------------------------------
--
-- Links all of the objects generated by the pipeline.
-- This process may vary from backend to backend.
--
--------------------------------------------------------------------------------

module System.Link (
    linkObjects
)
where

import IO

import Misc
import Misc.Files
import System.Control
import Config.Global

--------------------------------------------------------------------------------

linkObjects :: Sys ()
linkObjects = do
    verb1 "Linking all objects"
    back <- getConfig backend
    mods <- stGet modules
    -- NOTE: we assume the module info is stored in reverse dependency order.
    -- (See System.Control for details.)
    let fns = map moduleFilename (reverse mods)
    case back of
	NoBackEnd -> return ()

	SchemeBackEnd -> 
	    let prologue = inPath [schemePath] "scheme.scm"
	    in  linkScheme (prologue:fns)
	
	SchemeLazyBackEnd -> 
	    let prologue = inPath [schemePath] "scheme-lazy.scm"
	    in  linkScheme (prologue:fns)

	LvmBackEnd -> return ()
	    -- let prologue = inPath [schemePath] "scheme-lazy.scm"
	    -- in  linkScheme (prologue:fns)
  where
    schemePath = underInstallPath (mkPath["src","Backends","Scheme","Prologue"])
	
--------------------------------------------------------------------------------

-- Takes a list of the files containing the Chameleon modules compiled, and
-- links the corresponding scheme object files.
-- 
-- FIXME: We ought to be combining files in module-dependency order.
linkScheme :: [FilePath] -> Sys ()
linkScheme fns = do
    let scms = map chToSchemeSuffix fns
    out <- getConfig outputFile
    eh  <- doIO (openFileWrite out)
    checkE eh
    let h = fromSucc eh
    src <- proc h out scms
    doIO (closeHandle h)
  where
    proc :: Handle -> FilePath -> [FilePath] -> Sys ()
    proc h f []       = return ()
    proc h f (fn:fns) = do
	es <- doIO (readFileContents fn)
	checkE es
	ew <- doIO (writeString f h (fromSucc es))
	checkE ew
	proc h f fns 
